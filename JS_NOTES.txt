Regex:/ptr/options
SET:[ABC]oy
checks in the input str whether any one of the letter matches in the 
set given there and later proceeds to the remaining pattern.
Air Circle ABCir-->Here in the last word only Cir is taken as only one 
letter has to be taken into consideration
\d-->for numbers 
[a-z][A-Z]-->for series follwing this criteria
[a-zA-z]--> having either a to z or A-Z
[^\d] or [^0-9]-->selects all except numbers.
\w-->alphabhet and numbers
[^\w]-->for special characters.
\s-->for spaces
we can put capital letters indicating to the opposite to their natures.
--------------------------------------------------------------------
var str="some string"
var patn=/some ptn/
--------------------------------------------------------------
console.log(str.search(patn))
output:-1 if not found 
           index if found
--------------------------------------------------------------
patn.test(str)-->see if the input is in the satisfies the pattern
return boolean value
------------------------------------------------------------------------------------------------------------------------------
str.match(patn)-->returns the array of first matched pattern in str.If globally is searched ,the array of patterns are delivered.
null on non match scenario
var patrn=/pattersn/gi;
g-->globally 
i-->caseignorance
-------------------------------------------------------------------------------------------------------------------------------
Another notation pattern declaration is 
var pattern=new RegExp("pattrn","gi");
---------------------------------------------------------------
we can also use 
var patn=/[0-9]/gi
------------------------------------------------------------
\s---->for white spaces finding
\S---->for words which are not white spaces
---------------------------------------------------------
/./-->which scans th first letter only
/./g-->which scans the entire string including the white spaces
/[.]/g-->scans all the dots in the string
----------------------------------------------------------------------
Sets are used to to search for characters that are written inside square brackets
[ABC]ion-->chooses any of the A,B,C if matches.
IF all the characters are present then last one is chosen for output.
--------------------------------------------------------
/[A-Z]oin/
for email we can have regex as
[A-Z | a-z | 0-9]@gmail.com]-->regex for email
pat.test(str)
--------------------------------------------------------
\d-->for only digits
\D-->except digits
----------------------------------------------------------
\w-->not for special characters
\W-->for special characters and spaces
-------------------------------------------------
Quantifiers
------------------------------
select a value multiple times and can decide how many times 
should  avalue selected.
[\d]{3}
^-->will consider scanning from the strating if not found then output is null
$-->asserts position from the end of the line
the "?" in the regex will make its immediate left character to appear 0 ot one time.
--------------------------------------------------------------------------------------------------------------------------------
^[\w]{6,8}$-->Ensure the input string is strictly following the rule of being 6 to 8 in length from begining and also from ending.
--------------------------------------------------------------------------------------------------------------------------------
the "this" keyword
This key word is used to represent the current value of the variable.
Suppose we have decalred a variable var name="SK" at the top and in the object we again created a var Name="Irfan".If we use Name in the object we obvibiviosly get "SK" and in order to get the "Irfan" we use this keyword.
-----------------------------------------------------------------------------------------------------------------------
HTTP-->Hyper Text transfer protocol
Requests are send to backend using http protocol.
-------------------------------------------------------------------------------------------------
GET-->used to get some data from backend.
POST-->create a new entries on the backend.
PUT-->Used to update an existing data entry on the backend.
DELETE-->delete an existing data entry on the backend.
---------------------------------------------------------------------------------------------
Response Codes
================================
200-->Success and data is received at the front end.
400-->bad request backend did not understand the request
401-->unauthorized  to data access.
404-->Not found
500-->somw thing went wrong;faile dat the backend. 
------------------------------------------------------------------------------------------------------------------
JSON-->Java Script Object Notation
       -->Text format that makes easy to share data between Clients and Servers. 
var Obj=[{"name":"Irfan","age":20},{"name":"waseem","age":25},{"name":"Arfan","age":10}]
The above is called JSON array
The keys in the JSON Object should be double quoted,Otherwise it throws an error while parsing it.
--------------------------
TWO METHODS
--------------------------
JSON.stringify(obj)-->makes obj as string
JSON.parse(str)-->makes str to json obj.
--------------------------------------------------
In JSON keys must be strings and in java script it can be any
And in JSON the string values must be in double quotes.
JSON vs XML
-----------------------------
JSON and XML are both used to receive data frin a web server.
{"Students":[{"name":"Irfan"},{"name":"wasi"},{"name":"arfan"}]}
XML
------------
<students>
<student>
<name>
Irfan
</name>
</student> 
</students>
XML uses html tags.
JSON is better than XML
JSON data can be parsed by a standard javaScript funtion
XML needs XML parser seperately
We can store the object in local storage and can retrive later
-------------------------------------------------------
localStorage.setItem("testData",myJson);
var text=localstorage.getItem("testData");
-------------------------------------------------------
AJAX-->Asynchronous JavaScript and XML
Running code in background is called Asynchronous Execution
AJAX uses built-in XMLHttpRequest Object to send request to the server where server responds to it and javascript updates the content without reloading the page unnecessarily.


Fake API-->https://jsonplaceholder.typicode.com/photos
The syntax for using AJX is 
-------------------------------
function getApiData(){
var http=new XMLHttpRequest();
http.open("GET","API link",true)true-->Asyncronous or not
http.send();
}
The backend server viz Fake API(here) wil send the data to the 
client webpage
We have readyState Property for the request
0-->UNSENT
1-->OPENED
2-->HEADERS RECEIVED
3-->Req b eing processed
4-->DONE
We can use the response data that is sent from the server side and wit the help of js we can embedd into out code without refreshing the page and that too the updated content will come to the page every time the page is opened from API.
We can post the data using XML request and send data to the API server and fetch it back 
---------------------------------------------
JQUERY
---------------------------------------------
-->js library
-->fat and feature rich
-->write less do more
-->DOM manipulation
-->CSS manipulation
-->HTML event
-->Effects and animations
-->AJAX calls
we need to embedd the code in order to use it.























